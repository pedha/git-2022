#!/usr/bin/env ts-node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint no-process-exit: 0 */
// tslint:disable:no-console
const path = require("path");
const chalk = require("chalk");
const node_opcua_1 = require("node-opcua");
const node_opcua_pki_1 = require("node-opcua-pki");
const node_opcua_server_configuration_1 = require("node-opcua-server-configuration");
const yargs = require("yargs");
const rootFolder = path.join(__dirname, "../../..");
const envPaths = require("env-paths");
const config = envPaths("node-opcua-default").config;
const pkiFolder = path.join(config, "PKI");
const certificateManager = new node_opcua_1.OPCUACertificateManager({
    automaticallyAcceptUnknownCertificate: true,
    name: "PKI",
    rootFolder: pkiFolder
});
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const argv = yield yargs.wrap(132).option("port", {
            alias: "p",
            default: "26543",
            describe: "port to listen"
        }).argv;
        const port = parseInt(argv.port, 10) || 26555;
        const server_options = {
            port,
            nodeset_filename: [node_opcua_1.nodesets.standard],
            serverCertificateManager: certificateManager
        };
        process.title = "Node OPCUA Server on port : " + server_options.port;
        const tmpFolder = path.join(__dirname, "../certificates/myApp");
        const applicationGroup = new node_opcua_pki_1.CertificateManager({
            location: tmpFolder
        });
        yield applicationGroup.initialize();
        const server = new node_opcua_1.OPCUAServer(server_options);
        console.log(" Configuration rootdir =  ", server.serverCertificateManager.rootDir);
        console.log(chalk.yellow("  server PID          :"), process.pid);
        server.on("post_initialize", () => __awaiter(this, void 0, void 0, function* () {
            const addressSpace = server.engine.addressSpace;
            // to do: expose new nodeid here
            const ns = addressSpace.getNamespaceIndex("http://yourorganisation.org/my_data_type/");
            yield (0, node_opcua_server_configuration_1.installPushCertificateManagement)(addressSpace, {
                applicationGroup: server.serverCertificateManager,
                userTokenGroup: server.userCertificateManager,
                applicationUri: server.serverInfo.applicationUri
            });
            console.log("Certificate rejected folder ", server.serverCertificateManager.rejectedFolder);
        }));
        try {
            yield server.start();
        }
        catch (err) {
            console.log(" Server failed to start ... exiting");
            process.exit(-3);
        }
        const endpointUrl = server.getEndpointUrl();
        console.log(chalk.yellow("  server on port      :"), chalk.cyan(server.endpoints[0].port.toString()));
        console.log(chalk.yellow("  endpointUrl         :"), chalk.cyan(endpointUrl));
        console.log(chalk.yellow("\n  server now waiting for connections. CTRL+C to stop"));
        process.on("SIGINT", () => __awaiter(this, void 0, void 0, function* () {
            // only work on linux apparently
            yield server.shutdown(1000);
            console.log(chalk.red.bold(" shutting down completed "));
            process.exit(-1);
        }));
    });
}
main();
//# sourceMappingURL=server_with_push_certificate.js.map