#!/usr/bin/env ts-node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint no-process-exit: 0 */
// tslint:disable:no-console
const chalk = require("chalk");
const path = require("path");
const yargs = require("yargs");
const os = require("os");
const node_opcua_1 = require("node-opcua");
Error.stackTraceLimit = Infinity;
function constructFilename(filename) {
    return path.join(__dirname, "../", filename);
}
const userManager = {
    isValidUser: (userName, password) => {
        if (userName === "user1" && password === "password1") {
            return true;
        }
        if (userName === "user2" && password === "password2") {
            return true;
        }
        return false;
    }
};
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const argv = yield yargs(process.argv)
            .wrap(132)
            .option("alternateHostname", {
            alias: "a",
            describe: "alternateHostname"
        })
            .option("port", {
            alias: "p",
            default: 26543
        })
            .option("silent", {
            alias: "s",
            default: false,
            describe: "silent - no trace"
        })
            .option("maxAllowedSessionNumber", {
            alias: "m",
            default: 10
        })
            .help(true).argv;
        const port = argv.port || 26543;
        // server_options.alternateHostname = argv.alternateHostname;
        const server_options = {
            securityPolicies: [node_opcua_1.SecurityPolicy.Basic128Rsa15, node_opcua_1.SecurityPolicy.Basic256],
            securityModes: [node_opcua_1.MessageSecurityMode.Sign, node_opcua_1.MessageSecurityMode.SignAndEncrypt],
            port,
            nodeset_filename: [node_opcua_1.nodesets.standard, node_opcua_1.nodesets.di],
            serverInfo: {
                applicationName: { text: "NodeOPCUA", locale: "en" },
                applicationUri: (0, node_opcua_1.makeApplicationUrn)(os.hostname(), "NodeOPCUA-SecureServer"),
                productUri: "NodeOPCUA-SecureServer",
                discoveryProfileUri: null,
                discoveryUrls: [],
                gatewayServerUri: null
            },
            buildInfo: {
                buildDate: new Date(),
                buildNumber: "1234"
            },
            userManager,
            isAuditing: false
        };
        process.title = "Node OPCUA Server on port : " + server_options.port;
        const server = new node_opcua_1.OPCUAServer(server_options);
        server.on("post_initialize", () => {
            /* empty */
        });
        console.log(chalk.yellow("  server PID          :"), process.pid);
        console.log(chalk.yellow("  silent              :"), argv.silent);
        yield server.start();
        const endpointUrl = server.getEndpointUrl();
        console.log(chalk.yellow("  server on port      :"), chalk.cyan(server.endpoints[0].port.toString()));
        console.log(chalk.yellow("  endpointUrl         :"), chalk.cyan(endpointUrl));
        console.log(chalk.yellow("\n  server now waiting for connections. CTRL+C to stop"));
        if (argv.silent) {
            console.log("silent");
            console.log = (...args) => {
                /* silent */
            };
        }
        server.on("create_session", (session) => {
            console.log(" SESSION CREATED");
            console.log(chalk.cyan("    client application URI: "), session.clientDescription.applicationUri);
            console.log(chalk.cyan("        client product URI: "), session.clientDescription.productUri);
            console.log(chalk.cyan("   client application name: "), session.clientDescription.applicationName.toString());
            console.log(chalk.cyan("   client application type: "), session.clientDescription.applicationType.toString());
            console.log(chalk.cyan("              session name: "), session.sessionName ? session.sessionName.toString() : "<null>");
            console.log(chalk.cyan("           session timeout: "), session.sessionTimeout);
            console.log(chalk.cyan("                session id: "), session.nodeId);
        });
        server.on("session_closed", (session, reason) => {
            console.log(" SESSION CLOSED :", reason);
            console.log(chalk.cyan("              session name: "), session.sessionName ? session.sessionName.toString() : "<null>");
        });
        process.on("SIGINT", () => __awaiter(this, void 0, void 0, function* () {
            // only work on linux apparently
            console.error(chalk.red.bold(" Received server interruption from user "));
            console.error(chalk.red.bold(" shutting down ..."));
            yield server.shutdown(1000);
            console.error(chalk.red.bold(" shot down ..."));
            process.exit(1);
        }));
    });
}
main();
//# sourceMappingURL=simple_secure_server.js.map