#!/usr/bin/env ts-node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-console
// this script queries the discovery server and display the discovery urls
const chalk = require("chalk");
const node_opcua_1 = require("node-opcua");
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const discovery_server_endpointUrl = "opc.tcp://localhost:4840/UADiscovery";
        console.log("Interrogating ", discovery_server_endpointUrl);
        try {
            const { servers, endpoints } = yield (0, node_opcua_1.findServers)(discovery_server_endpointUrl);
            for (const server of servers) {
                console.log("     applicationUri:", chalk.cyan.bold(server.applicationUri));
                console.log("         productUri:", chalk.cyan.bold(server.productUri));
                console.log("    applicationName:", chalk.cyan.bold(server.applicationName.text));
                console.log("               type:", chalk.cyan.bold(node_opcua_1.ApplicationType[server.applicationType]));
                console.log("   gatewayServerUri:", server.gatewayServerUri ? chalk.cyan.bold(server.gatewayServerUri) : "");
                console.log("discoveryProfileUri:", server.discoveryProfileUri ? chalk.cyan.bold(server.discoveryProfileUri) : "");
                console.log("      discoveryUrls:");
                for (const discoveryUrl of server.discoveryUrls) {
                    console.log("                    " + chalk.cyan.bold(discoveryUrl));
                }
                console.log("-------------");
            }
            for (const endpoint of endpoints) {
                console.log(endpoint.endpointUrl.toString(), endpoint.securityLevel, endpoint.securityPolicyUri, node_opcua_1.MessageSecurityMode[endpoint.securityMode]);
            }
        }
        catch (err) {
            if (err instanceof Error) {
                console.log("err ", err.message);
            }
            process.exit(-2);
        }
    });
}
main();
//# sourceMappingURL=simple_findservers.js.map