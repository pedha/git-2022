#!/usr/bin/env ts-node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint no-process-exit: 0 */
// tslint:disable:no-console
const path = require("path");
const chalk = require("chalk");
const node_opcua_1 = require("node-opcua");
const yargs = require("yargs");
Error.stackTraceLimit = Infinity;
function constructFilename(filename) {
    return path.join(__dirname, "../", filename);
}
const rootFolder = path.join(__dirname, "../../..");
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const argv = yield yargs.wrap(132).option("port", {
            alias: "p",
            default: "26543",
            describe: "port to listen"
        }).argv;
        const port = parseInt(argv.port, 10) || 26555;
        const server_certificate_file = constructFilename("certificates/server_cert_2048.pem");
        const server_certificate_privatekey_file = constructFilename("certificates/server_key_2048.pem");
        const server_options = {
            certificateFile: server_certificate_file,
            privateKeyFile: server_certificate_privatekey_file,
            port,
            nodeset_filename: [node_opcua_1.nodesets.standard, path.join(rootFolder, "modeling/my_data_type.xml")]
        };
        process.title = "Node OPCUA Server on port : " + server_options.port;
        const server = new node_opcua_1.OPCUAServer(server_options);
        console.log(chalk.yellow("  server PID          :"), process.pid);
        server.on("post_initialize", () => {
            const addressSpace = server.engine.addressSpace;
            // to do: expose new nodeid here
            const ns = addressSpace.getNamespaceIndex("http://yourorganisation.org/my_data_type/");
            const myStructureType = addressSpace.findVariableType("MyStructureType", ns);
            if (!myStructureType) {
                console.log(" ns = ", ns, "cannot find MyStructureDataType ");
                return;
            }
            const namespace = addressSpace.getOwnNamespace();
            const someObject = namespace.addObject({
                browseName: "SomeObject",
                organizedBy: addressSpace.rootFolder.objects
            });
            myStructureType.instantiate({
                browseName: "MyVar",
                componentOf: someObject
            });
        });
        try {
            yield server.start();
        }
        catch (err) {
            console.log(" Server failed to start ... exiting");
            process.exit(-3);
        }
        const endpointUrl = server.getEndpointUrl();
        console.log(chalk.yellow("  server on port      :"), chalk.cyan(server.endpoints[0].port.toString()));
        console.log(chalk.yellow("  endpointUrl         :"), chalk.cyan(endpointUrl));
        console.log(chalk.yellow("\n  server now waiting for connections. CTRL+C to stop"));
        process.on("SIGINT", () => __awaiter(this, void 0, void 0, function* () {
            // only work on linux apparently
            yield server.shutdown(1000);
            console.log(chalk.red.bold(" shutting down completed "));
            process.exit(-1);
        }));
    });
}
main();
//# sourceMappingURL=simple_server_with_custom_extension_objects.js.map