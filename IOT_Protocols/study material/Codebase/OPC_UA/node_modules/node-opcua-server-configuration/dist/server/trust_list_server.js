"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeTrustList = exports.buildTrustList = exports.TrustListMasks = void 0;
const node_opcua_types_1 = require("node-opcua-types");
const fs = require("fs");
const path = require("path");
const node_opcua_binary_stream_1 = require("node-opcua-binary-stream");
const node_opcua_crypto_1 = require("node-opcua-crypto");
function readAll(folder) {
    return __awaiter(this, void 0, void 0, function* () {
        const results = [];
        const files = yield fs.promises.readdir(folder);
        for (const f of files) {
            const file = path.join(folder, f);
            const ext = path.extname(file);
            if (ext === ".der" || ext === ".pem") {
                const buf = yield (0, node_opcua_crypto_1.readCertificate)(file);
                results.push(buf);
            }
            else if (ext === ".crl") {
                const buf = yield (0, node_opcua_crypto_1.readCertificateRevocationList)(file);
                results.push(buf);
            }
            else {
                console.log(" unknown extesnion on file ", f);
            }
        }
        return results;
    });
}
var TrustListMasks;
(function (TrustListMasks) {
    TrustListMasks[TrustListMasks["None"] = 0] = "None";
    TrustListMasks[TrustListMasks["TrustedCertificates"] = 1] = "TrustedCertificates";
    TrustListMasks[TrustListMasks["TrustedCrls"] = 2] = "TrustedCrls";
    TrustListMasks[TrustListMasks["IssuerCertificates"] = 4] = "IssuerCertificates";
    TrustListMasks[TrustListMasks["IssuerCrls"] = 8] = "IssuerCrls";
    TrustListMasks[TrustListMasks["All"] = 15] = "All";
})(TrustListMasks = exports.TrustListMasks || (exports.TrustListMasks = {}));
;
function buildTrustList(certificateManager, trustListFlag) {
    return __awaiter(this, void 0, void 0, function* () {
        const trustList = new node_opcua_types_1.TrustListDataType({
            specifiedLists: trustListFlag,
            issuerCertificates: undefined,
            issuerCrls: undefined,
            trustedCertificates: undefined,
            trustedCrls: undefined,
        });
        if ((trustListFlag & TrustListMasks.TrustedCertificates) === TrustListMasks.TrustedCertificates) {
            trustList.trustedCertificates = yield readAll(certificateManager.trustedFolder);
        }
        if ((trustListFlag & TrustListMasks.TrustedCrls) === TrustListMasks.TrustedCrls) {
            trustList.trustedCrls = yield readAll(certificateManager.crlFolder);
        }
        if ((trustListFlag & TrustListMasks.IssuerCertificates) === TrustListMasks.IssuerCertificates) {
            trustList.issuerCertificates = yield readAll(certificateManager.issuersCertFolder);
        }
        if ((trustListFlag & TrustListMasks.IssuerCrls) === TrustListMasks.IssuerCrls) {
            trustList.issuerCrls = yield readAll(certificateManager.issuersCrlFolder);
        }
        return trustList;
    });
}
exports.buildTrustList = buildTrustList;
function writeTrustList(fs, filename, trustListFlag, certificateManager) {
    return __awaiter(this, void 0, void 0, function* () {
        const trustList = yield buildTrustList(certificateManager, trustListFlag);
        const stream = new node_opcua_binary_stream_1.BinaryStream(trustList.binaryStoreSize());
        trustList.encode(stream);
        yield new Promise((resolve, reject) => {
            fs.writeFile(filename, stream.buffer, "binary", (err) => {
                if (err)
                    return reject(err);
                resolve();
            });
        });
    });
}
exports.writeTrustList = writeTrustList;
//# sourceMappingURL=trust_list_server.js.map